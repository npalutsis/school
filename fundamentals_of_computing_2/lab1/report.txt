Author: Nick Palutsis
Date: January 26, 2016
Class: CSE 20212
Lab 1

	When the program is run, it prints out a board of 6 rows and 7 columns to the user. Each column is labeled 1-7. The program asks the user to enter the number of a row. If the row is full or the number entered is not 1-7 and error will display and it will ask the user to enter a new value. When the user enters a valid number an ‘X’ replaces a space at the bottom of that numbered column. The computer then randomly chooses its own turn and places a ‘O’ in a column. When the user or computer gets 4 of their discs in a row either vertically, horizontally, or diagonally then a congratulations message is displayed and ends the game. If every space on the board is filled and there is no winner, then it ends and says there was a tie. If the user enters -1 then the program will quit.
	The program works by utilizing C4Col.cpp and C4Board.cpp to hold class functions and the corresponding .h files to hold their prototypes. “get” functions were used in order to return the values of specific private variables in the class. Without them it would not be possible to retrieve the values for these variables (such as maxDiscs) outside of their class. This is important because C4Board would not be able to access this information without the get function. The C4Col class initializes each column by setting the maximum number of rows, filling an array of that size with blank spaces in the constructor, and modifying those values when players add discs to them. The C4Board class initializes the entire board by creating an array of objects of the C4Col class by allocating dynamic memory in the constructor. The delete command in the deconstructor will destroy this once it goes out of scope. Deconstructors are needed with dynamic memory allocation in order to delete objects when they lose scope to free up the allocated memory.  This C4Board class holds the function to display the board, play the game, and check for winners. Display() prints the current board, and play() continuously cycles through turns until checkWinner() is true by getting four in a row in any direction, isFull() is true for every column, or the user enters -1. The program has a computer player built in which uses srand() and rand() % numColumns to generate a random column. The program checks to see if the computer or user enters -1 which will break from the while loop and end the game (the computer cannot choose this option), a value that is too low or too high, or a column that is full. If a player does enter an invalid option an error message will be displayed and it will ask for a different move.
	The program was tested for accuracy by playing many games. It was tested to make sure that when a player got four in a row vertically, horizontally, or diagonally the program quit. It was tested to make sure that both players could win, and that the appropriate congratulatory message was displayed. It was also tested to make sure that if the board was full and no one won that the game ended in a tie. Entering -1 was tested to ensure that the program quit, and any inputs <= 0 or > the number of columns was registered as an invalid input and displayed the error message.

