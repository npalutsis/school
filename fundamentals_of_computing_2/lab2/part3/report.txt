Author: Nick Palutsis
Date: February 2, 2016
CSE20212
Lab2

	The program works by prompting the user for a numerator and denominator for two rational numbers. When the numerator and denominators are entered the program displays both numbers as two fractions. It then displays 6 operations for the user. It calculates the sum by adding both fractions together. The next operation subtracts the first second fraction from the first number. The third subtracts the first fraction from the second fraction. The fourth operation multiplies the two fractions together. The fifth and sixth operations find the reciprocal of the fractions. 
	The program utilizes the class Rational. The interface in the .h file declares the prototypes for the constructors, overloads operators, greatest common denominator function, and the variables for the numerator and denominator. There is also an overloaded << operator declared as a friend function.  The .cpp file is where these are implemented. The default constructor sets the numerator and denominators to one. The nondefault constructor checks if there is a zero entered as a denominator, and it replaces it with one if this is the case. It also uses the gcd() function to find the greatest common denominator and out the fractions in lowest terms. The operators are overloaded using this pointer and simple mathematical conversions to create a single numerator and denominator from the two original fractions based on the operator being overloaded. A Temp rational class is then created to convert this new fraction into reduced form, and it is returned. The function userInteraction() reads in the userâ€™s inputs for two numerators and denominators and creates an object for each from the Rational class. It then accesses these objects to perform six calculations using the four overloaded operators. The main.cpp file creates an object of the Rational class, and then it calls the function userInteraction() to perform the operations.
	The program was tested by ensuring that the program gave the correct outputs when the numerator was greater than the denominator, and when the denominator was greater than the numerator. It was also tested to make sure that the program added, subtracted, multiplied, and found the reciprocal of the fractions properly. It was tested for when zero was in the denominator so that an error was displayed and that the value was changed to one.

