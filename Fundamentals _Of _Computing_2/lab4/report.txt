/* Author: Nick Palutsis
	Date: February 16, 2016
	CSE 20212
	Lab 4 */

USER: For the program displays a blackjack game. It prints out that it dealt two cards to the user and the dealer and what they were. It then prints out the current total for the user and asks if they would like to hit. If the user presses ‘y’ it will deal them another card and update their total. If they press ‘n’ it will move on to the dealer. If the user goes over 21 It shows them that they lose. The dealer will then be dealt cards until their total is 17 or greater. If the program will display who the winner is based on who is closest to 21 without going over. The game will then ask the user if they would like to play again by having them press ‘y’ or ‘n’. If ‘y’, then the process will repeat. If ‘n’, then the a goodbye message is displayed and the program exits.

INTERNAL: For the blackjack program a class called CardDeck is created. In this class, the overloaded constructor creates a deck of 52 cards by using the push_back() function of deque which adds values to the end of the vector. The member function shuffle() incorporates the deque member function random_shuffle() to shuffle the deck that was created. Srand(time(0)) was also used for this to make sure that the shuffle was random each time. The member function deal() is responsible for dealing cards to a given player. It reads in a value i for the location of the card to be dealt in the deck, a true/false value for if the card dealt should be displayed (since one card of the dealer is facedown), and a string for which player the cards are being dealt to. This function takes the modulus 12 of the element of the deck to assign a card value to the it. Display() is called to print out which card was dealt for to which player. Deal() outputs the value of the card (2-11). In the main.cpp the CardDeck object Deck(52) is created to instantiate a deck of 52 cards. The shuffle function is then called to shuffle the deck. A while loop runs continuously until the variable play is false. Variables player and dealer store the running total for each player, and they are incremented by the value that deal() outputs when a player is dealt a card. A do while loop allows the program to deal cards to the user by asking for an input of ‘y’ or ‘n’. If the variable player is ever over 21 a losing message is displayed and the loop breaks. Another while loop continuously deals the dealer cards until their total is 17 or greater. If and else statements display winning messages to the appropriate player. It then asks the user to play a new game. If the input is ‘y’ then player and dealer are set back to 0. If ‘n’ then play becomes false, a goodbye message is displayed, and the program exits. If the user plays again, the variable i that cycles through the deck retains its value. If this value shows that there are 15 cards left in the deck at the start of a new game then the deck will be reshuffled using an if statement and a call to shuffle().

TESTED: The program was tested for correctness by first ensuring that the cards dealt and the totals for the players were correct. It was tested to see that the user’s inputs caused more cards to be dealt or not, or new games to be played or not. It was tested to ensure that the deck was only reshuffled when there were 15 or less cards in the deck at the start of the game. It was tested to ensure that if the user went over that they lost automatically, and if they didn’t that the dealer was dealt cards until their total was 17 or greater. If the dealer went over it showed that the player won, and if no player went over then the player closest to 21 won with a tie going to the user.

