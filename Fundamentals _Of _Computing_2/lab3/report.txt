Author: Nick Palutsis
Partner: Henry Long
Date: February 9, 2016
CSE 20212
Lab3 Report

User: For part1 the program will run by showing 2 sets of information. It shows information for a boat loan including the information for months until the ship is paid off, the number of cannons on the ship, and how much space there is for loot on the ship. In part2 the program will ask the user for the name of the person who the package will be delivered to, their zip code, the weight of the package, and the cost per ounce to ship it. It will then display the price to ship the package with two day shipping that includes an extra fixed cost, or with overnight shipping that includes an extra price per ounce. In part3 question1 the program appears to run exactly as the program for part1 does. For question2 in part3 the program will output the total cost of shipping 3 overnight packages and 3 two day shipping packages with values that are predetermined.

Internal: For part1 the program uses the class BankAccount to serve as the base class in the hierarchy. This is where the name, account number, and zip code for the user are stored for a user. BankAccount then has two derived classes. BoatLoan inherits the information from BankAccount and adds its own additional private variables for the months left on the loan, the number of cannons, and the maximum loot storage. It has a virtual print function to print the current state of the loan for a user. Checking operates the same as BoatLoan by inheriting the information from BankAccount, except it has its own private variables to store the ammount of gold, silver, and gems, and the overall account balance of that loot. In the main.cpp file these derived classes are called by first creating objects for each and then entering the information typically for BankAccount (name, zip code, and account number) as inputs followed by the necessary additional information for the derived classes. The print functions are then called by doing boat1.print() and checking1.print(). 

Test: Part1 was evaluated for correctness by running the program and ensuring that the program gave the correct outputs based on the inputs passed into the derived classes in the main.cpp file. For part2, the program was first tested to make sure that the correct calculations were made and outputted based on the given inputs. It was also tested to make sure that the program changed the weight and cpo to positive values when negative ones were given. For part3 question1, the program was tested by making sure that the program gave the same output as part1. For question 2, the program was tested to make sure that it gave the correct sum of the packages given the set inputs provided.

For part2 the program uses the class Package to serve as the base class in the hierarchy. This is where the delivery name and zip code are stored as private variables, and weight and the cost per ounce for the package are stored as protected variables so that the derived classes can still access these values. It also has a virtual CalculateCost() which is used to calculate the cost in the derived classes from the values of weight and cpo, and it makes sure that the values for weight and for cpo are positive by using an if statement. TwoDayPackage and OvernightPackage are both derived classes from Package. In the constructor for each the values for name, zip code, weight, and cost per ounce are passed along with an extra fixed cost for TwoDayPackage and an extra cost per ounce for OvernightPackage. In the main.cpp file the program asks the user to assign values to variables for the details for the package, and then it passes these variables into TwoDayPackage and OvernightPackage objects. It then calls the virtual print functions for both objects to show the price for both shipping options.

For part3 the program uses the exact same code from part1 and part2 except minor changes were made. For question1, the ":BankAccount(...)" at the top of the class for both derived classes was deleted to use composition instead of inheritance. Instead, BankAccount account was added within the constructor to create a BankAccount object(...) so that then information from BankAccount is still stored and connected to the class. For question2 the main.cpp was edited to accomodate multiple packages of each kind. Three objects for TwoDayPackage were created using set inputs, and three objects for OvernightPackage were created also using set inputs. Then a pointer to an array todaysPackage[] of type Package was created using each of the created packages. A for loop then cycles through this array to sum the total cost of each package by using a pointer to the CalculateCost() function in each object. Lastly, this sum is displayed to the user.

Composition vs. Inheritance: Even though both are similar, inheritance is more natural because it is easier to visualize by drawing the hierarchy from the parent class to each derived class. Both composition and inheritance are similar in terms of how they are implemented, but because of this ability to visualize the connections more logically it is a more natural to use inheritance for me.

Abstract & Concrete: To make the base class abstract you would need to use a void function() = 0. This allows the program to know that the program will be used, but it does not yet have instructions for when it is called. To make the derived classes concrete they need to lack having an abstract member. They can then provide the instructions for function() so that when it is called it knows which commands to run. It is important to use abstract classes because it helps create a template for the child classes to follow when they are created, and then they can give the function their own functionality later.
