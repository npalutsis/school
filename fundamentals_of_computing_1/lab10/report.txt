Author: Nick Palutsis
Date: December 7, 2015
Class: CSE 20211
Lab: 10
For this lab I worked individually.
	This program works by first prompting the user to enter a list of words. A total of 20 words are read in with a maximum length of 15 characters. Once the list is done, the user must enter a ‘.’ In order to let the program know that the list is done. The computer then prints out a solution board for a 15 x 15 crossword puzzle. The words are displayed in all capital letters and should be connected to each other based on letters that they have in common. Blank spaces are represented by a ‘.’ The program then displays the actual crossword puzzle to the user. What was once a ‘.’ In the previous board is now a ‘#’, and what was previously a letter is now just a space in the grid. Lastly, the program lists off the clues for the program. These clues are the words that solve the puzzle, but their letters are jumbled up. They are listed in order from the largest word to the smallest word.
	The function utilizes several functions in order to work. The program first creates two 20 x 16 arrays (one for the list of words and one for the jumbled clues) and another 15 x 16 array for the board. The first function enter_words() allows the computer to read in a list of strings entered by the user using fgets(). It then goes through the string character by character and changes all lowercase letters to uppercase letters and ‘\n’ and ‘ ‘ to ‘\0’. If the user entered a ‘.’ It breaks from the loop. The function returns an integer value that signifies how many words were entered total. Swap() then uses the bubble sort method to sort the array by decreasing string length. If a swap needs to take place, the involved rows of the array are copied to two separate temporary arrays. Nul characters are then entered in the corresponding rows of the array words, and then the temporary arrays are then copied back to the opposite row in words from which they came from. Initialize_solution() creates a 15 x 15 array of ‘.’. Print_first_word() replaces the ‘.’ In the middle of the board with the letters of the longest string in words. A for loop then runs place_words() for each of the remaining words in descending order. This function uses two for loops to check each position of the board array. It performs two checks: can_place_down() and can_place_across. Can_place_down() compares the position on the board to the first letter of the word. If that position matches the letter of the word then the variable connection becomes true. If it is a different letter, or there are letters on either side of it then it will return 0; It then runs the same comparison for the position directly below the first one until each letter of the word iss checked. If a connection was made then it returns 1, otherwise it returns 0. Can_place_across() functions the same way except it increments the word across the board instead of down the board. If either of these functions returns true then place_words() replaces the characters on the board with the letters of the word. After each word is checked, print_board() prints the array board character by character. If a word was unable to be placed, place_words() returns 0 and displays an error message before quitting the program. Create_board() uses two for loops to go through the array board character by character replacing ‘.’ With ‘#’ and letters with ‘ ‘. Print_board() then prints this new array. Create_clues() uses strcpy() to copy each row to copy each word from words to the array clues. Strfry() then rearranges the characters in the strings.  Print_words() prints the clues string by string.
	The program was tested by testing the words used in both examples. It was also tested where words could not possibly form connections, and it displayed the proper error message and quit the program. The program was able to produce proper solutions as well as empty boards and clues in each situation.

