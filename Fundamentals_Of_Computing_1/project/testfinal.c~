/* Author: Nick Palutsis & Teddy Brombach
Class: CSE 20211
Final Project
Date: December 13, 2015 */

#include <stdio.h>
#include <unistd.h>
#include <math.h>
#include "gfx4.h"
#include "shipinfo.h"

void draw_falcon(int, double, int, int);
void draw_fighter(int, double, int, int);
int collision(int, int, int, int, int, int);
void infinite_edge(int, int, int, double *, double *);
int main()
{
	int wd;
	int ht;
	int waittime = 20000;
	double dtheta = .1;
	char c;
	
	struct ship falcon;
	struct ship fighter1;
	
	wd = gfx_screenwidth();
   ht = gfx_screenheight();
	
	falcon.x = wd/2;
	falcon.y = ht/2;
	falcon.pX = &falcon.x;
	falcon.pY = &falcon.y;
	falcon.r = 30;
	falcon.theta = 0;
	falcon.v = 2;
	
	fighter1.x = 0;
	fighter1.y = 0;
	fighter1.pX = &fighter1.x;
	fighter1.pY = &fighter1.y;
	fighter1.r = 20;
	fighter1.theta = M_PI/3;
	fighter1.v = 3;
	
	gfx_open(wd, ht, "Star Wars");  // Open a new window for drawing.

	while(1) { 
		gfx_clear();
		gfx_flush;
		gfx_color(200, 200, 200);
		draw_falcon(falcon.r, falcon.theta, falcon.x, falcon.y);
		draw_fighter(fighter1.r, fighter1.theta, fighter1.x, fighter1.y);

		gfx_flush;
		usleep(waittime);      // Pause for set number of seconds

		if(gfx_event_waiting()) { 
			c = gfx_wait();
			if(c == 'q')		// Quits program
				return 0;
			else if(c == 'j')
				falcon.theta = falcon.theta - dtheta;
			else if(c == 'l')
				falcon.theta = falcon.theta + dtheta;
			else if(c == 'i'){
				if(falcon.v <= 5)
					falcon.v++;
			}
			else if(c == 'k'){
				if(falcon.v >= -3)
					falcon.v--;
			}
		}

		fighter1.theta = atan2((falcon.y-fighter1.y), (falcon.x-fighter1.x));
    
		falcon.x = falcon.x + falcon.v * cos(falcon.theta);
		falcon.y = falcon.y + falcon.v * sin(falcon.theta);
		fighter1.x = fighter1.x + fighter1.v * cos(fighter1.theta);
		fighter1.y = fighter1.y + fighter1.v * sin(fighter1.theta);
		
		infinite_edge(wd, ht, falcon.r, falcon.pX, falcon.pY);
		
		if(collision(falcon.x, falcon.y, falcon.r+5, fighter1.x, fighter1.y, fighter1.r+5))
		   break;
	}
	gfx_clear();
	gfx_color(255, 0, 0);
	gfx_text(wd/2, ht/2, "GAME OVER");
	usleep(999999);
	return 0;
}
//***********************************************************************************
//******************************* F U N C T I O N S *********************************
//***********************************************************************************

void draw_falcon(int r, double theta, int xc, int yc){
	gfx_fill_circle(xc, yc, r);
	XPoint mypts1[] = { {r*cos(theta + M_PI/15) + xc, r*sin(theta + M_PI/15)+yc},
		{r*cos(theta + M_PI/3) + xc, r*sin(theta + M_PI/3) + yc},
		{r*cos(theta + M_PI/12)*5/3 + xc, r*sin(theta + M_PI/12)*5/3 + yc},
		{r*cos(theta + M_PI/25)*19/12 + xc, r*sin(theta + M_PI/25)*19/12 + yc} };
	int sz1 = sizeof(mypts1)/sizeof(XPoint);
	gfx_fill_polygon(mypts1, sz1);
	XPoint mypts2[] = { {r*cos(theta - M_PI/15) + xc, r*sin(theta - M_PI/15)+yc},
		{r*cos(theta - M_PI/3) + xc, r*sin(theta - M_PI/3) + yc},
		{r*cos(theta - M_PI/12)*5/3 + xc, r*sin(theta - M_PI/12)*5/3 + yc},
		{r*cos(theta - M_PI/25)*19/12 + xc, r*sin(theta - M_PI/25)*19/12 + yc} };
	int sz2 = sizeof(mypts2)/sizeof(XPoint);
	gfx_fill_polygon(mypts2, sz2);  
	gfx_color(0, 0, 0);
	gfx_circle(xc, yc, r/4);
	gfx_line(r*cos(theta + M_PI/15) + xc, r*sin(theta + M_PI/15)+yc, (r/4)*cos(theta + M_PI/3) + xc, (r/4)*sin(theta + M_PI/3) + yc);
	gfx_line(r*cos(theta - M_PI/15) + xc, r*sin(theta - M_PI/15)+yc, (r/4)*cos(theta - M_PI/3) + xc, (r/4)*sin(theta - M_PI/3) + yc);
	gfx_line((r/4)*cos(theta + M_PI*4/3) + xc, (r/4)*sin(theta + M_PI*4/3) + yc, r*cos(theta + M_PI*4/3) + xc, r*sin(theta + M_PI*4/3) + yc);
	gfx_line((r/4)*cos(theta - M_PI*4/3) + xc, (r/4)*sin(theta - M_PI*4/3) + yc, r*cos(theta - M_PI*4/3) + xc, r*sin(theta - M_PI*4/3) + yc);
	gfx_line((r/4)*cos(theta + M_PI*3/2) + xc, (r/4)*sin(theta + M_PI*3/2) + yc, r*cos(theta + M_PI*3/2) + xc, r*sin(theta + M_PI*3/2) + yc);
	gfx_line((r/4)*cos(theta - M_PI*3/2) + xc, (r/4)*sin(theta - M_PI*3/2) + yc, r*cos(theta - M_PI*3/2) + xc, r*sin(theta - M_PI*3/2) + yc);

	gfx_fill_circle(r*cos(theta + M_PI)/2 + xc, r*sin(theta + M_PI)/2+yc, r/10);
	gfx_fill_circle(r*cos(theta + M_PI)*3/4 + xc, r*sin(theta + M_PI)*3/4+yc, r/10);
	gfx_fill_circle(r*cos(theta + M_PI*5/6)/2 + xc, r*sin(theta + M_PI*5/6)/2+yc, r/10);
	gfx_fill_circle(r*cos(theta + M_PI*5/6)*3/4 + xc, r*sin(theta + M_PI*5/6)*3/4+yc, r/10);
	gfx_fill_circle(r*cos(theta + M_PI*7/6)/2 + xc, r*sin(theta + M_PI*7/6)/2+yc, r/10);
	gfx_fill_circle(r*cos(theta + M_PI*7/6)*3/4 + xc, r*sin(theta + M_PI*7/6)*3/4+yc, r/10);
	gfx_circle(xc, yc, r);
}
//===================================================================================

void draw_fighter(int r, double theta, int xc, int yc){
	XPoint mypts1[] = { {r*cos(theta + M_PI)*4/5 + xc, r*sin(theta + M_PI)*4/5+yc},
		{r*cos(theta + +M_PI - M_PI/4)*3/2 + xc, r*sin(theta + M_PI - M_PI/4)*3/2 + yc},
		{r*cos(theta + M_PI - M_PI/7)*2 + xc, r*sin(theta + M_PI - M_PI/7)*2 + yc},
		{r*cos(theta + M_PI)*2 + xc, r*sin(theta + M_PI)*2 + yc},
		{r*cos(theta + M_PI + M_PI/7)*2 + xc, r*sin(theta + M_PI + M_PI/7)*2 + yc},
		{r*cos(theta + M_PI + M_PI/4)*3/2 + xc, r*sin(theta + M_PI + M_PI/4)*3/2 + yc},
		{r*cos(theta + M_PI)*4/5 + xc, r*sin(theta + M_PI)*4/5+yc} };
	int sz1 = sizeof(mypts1)/sizeof(XPoint);
	XPoint mypts2[] = { {r*cos(theta)*2/3 + xc, r*sin(theta)*2/3 + yc},
		{r*cos(theta - M_PI/4)*5/4 + xc, r*sin(theta - M_PI/4)*5/4 + yc},
		{r*cos(theta - M_PI*2/11)*7/4 + xc, r*sin(theta - M_PI*2/11)*7/4 + yc},
		{r*cos(theta)*7/4 + xc, r*sin(theta)*7/4 + yc},
		{r*cos(theta + M_PI*2/11)*7/4 + xc, r*sin(theta + M_PI*2/11)*7/4 + yc},
		{r*cos(theta + M_PI/4)*5/4 + xc, r*sin(theta + M_PI/4)*5/4 + yc},
		{r*cos(theta)*2/3 + xc, r*sin(theta)*2/3 + yc} };
	int sz2 = sizeof(mypts2)/sizeof(XPoint);
	gfx_color(0, 0, 0);
	gfx_fill_polygon(mypts2, sz2); 
	gfx_color(255, 255, 255);
	gfx_polygon(mypts2, sz2);
	gfx_fill_circle(xc, yc, r);
	gfx_color(0, 0, 0);
	gfx_circle(xc, yc, r);
	gfx_fill_circle(r*cos(theta)/3 + xc, r*sin(theta)/3+yc, r/3);
	gfx_fill_polygon(mypts1, sz1);
	gfx_color(255, 255, 255);
	gfx_polygon(mypts1, sz1);
}
//===================================================================================

int collision(int xm, int ym, int rm, int xf, int yf, int rf){
   
   if(sqrt(pow(xm-xf, 2) + pow(ym-yf, 2)) <= rm + rf)
      return 1;
   
   return 0;
}
//===================================================================================

void infinite_edge(int wd, int ht, int r, double *x, double *y){

	if(*x > wd + r + 20)
	   *x = -r - 10;
   else if(*x < -r - 20)
      *x = wd + r + 10;
   if(*y > ht + r + 20)
      *y = -r - 10;
   else if(*y < -r - 20)
      *y = ht + r + 10;
}
