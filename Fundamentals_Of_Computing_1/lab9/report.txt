Author: Nick Palutsis
Date: November 24, 2015
Class: CSE 20211
Lab9 

	For the user, this program opens a blank user for the user. When the user presses ‘1’ it displays a yellow Sierpinski triangle. When they press ‘2’ it draws a set of shrunken squares repeatedly drawn in the corners of the larger squares. When they press ‘3’ it displays two spirals of shrinking squares. When they press ‘4’ it repeatedly draws six shrunken circles evenly dispersed around a larger circle. When they press ‘5’ it draws a snowflake made by drawing five lines of equal length from the endpoint of the previous line. When they press ‘6’ it draws by drawing a line, and then repeatedly draws two smaller lines at angles from the endpoint of the first line. When they press ‘7’ it draws a fern by drawing one line. It then repeatedly draws four lines extending from this line at one angle, and then four more lines in the opposite angle. When the user presses ‘8’ it draws a spiral made up of shrinking spirals which are made up of more shrinking spirals. When the user presses ‘q’ it will close the window and end the program.
	The program works by using gfx_screenwidth() and gfx_screenheight() to read in the dimensions of the screen. It then uses gfx_open() to open a square window. The program then waits until an event happens, and if the keystroke matches the if/else if statements then they will perform the function. ‘q’ will break from the while loop and quit the program. The first function works by inputting a set of 3 coordinates to make a triangle. It then inputs these points in a function to draw a triangle from them. It then calls the original function 3 times to draw three more triangles using a corner and two of the midpoints of the original triangle as the set of points. Once the length of the sides is less than 2 it stops the function. The second function reads in a radius and a set of coordinates. It uses these inputs in another function which draws a square from them. It then calls the function 4 times with a shrunken radius and the four corners of the square for the x and y coordinates of each function call until the radius is less than 5. The Third function reads in a small radius, a large radius, a theta value, and the size of the window. It uses the same function as before to draw a square. It then calls the original function again but shrinks the radius of the square. It increments theta so that it moves in a circle, but by decreasing the radius of that circle it creates a spiral. The fourth function uses the same concept as the second function except it draws circles instead of squares, and instead of using the corners of a square as center coordinates it uses six equally spaced points from the center of the previous circle. The fifth function operates the same except it uses a function to draw five lines which radiate from a central point. Five calls to the original function are used to draw five shorter lines from the endpoint of each line. The sixth function draws a line, and then it uses two function calls to draw one shorter line from the endpoint of the previous line, and then another line at the opposite angle. The seventh function draws a line, and from this line it uses 8 function calls to draw 4 lines at the same angle along the line, and then 4 lines at the opposite angle along the other side by incrementing theta values and the x and y coordinates for the inputs. The last function first uses a function to draw a spiral by continuously drawing lines and shrinking the radius around a central point. It then uses two calls to the original function. The first one increments the theta value and shrinks the radius to serve as the general spiral shape to be displayed. The second will draw spirals within the general spiral structure.
	The program was tested by first making sure that it opens a blank window. It was then tested to see if random characters did anything, and the program was unresponsive. Pressing ‘q’ quit the program as it was supposed to. Pressing ‘1’-‘8’ draws each fractal perfectly as expected.

